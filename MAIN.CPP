#include "MOVE.H"
#include "STACK.H"
#include "BOARD.H"

 
int look_ahead(const Board &game, int depth, Move &recommended)
/* 
 
Pre:  Board game represents a legal game position.
Post: An evaluation of the game, based on looking ahead
depth moves, is returned.  The best move that can be found
for the mover is recorded as Move recommended.
Uses: The classes Stack, Board, and Move, together with
function look_ahead recursively.
 
*/

{
   if (game.done() || depth == 0)
      return game.evaluate();

   else {
      Stack moves;
      game.legal_moves(moves);
      int value, best_value = game.worst_case();

      while (!moves.empty()) {
         Move try_it, reply;
         moves.top(try_it);
         Board new_game = game;
         new_game.play(try_it);
         value = look_ahead(new_game, depth - 1, reply);
         if (game.better(value, best_value)) { //  try_it is the best move yet found
            best_value = value;
            recommended = try_it;
         }
         moves.pop();
      }
      return best_value;
   }
}
 

void main()
{
   Board game;
   Move next_move;
   game.instructions();
   cout << " How much lookahead?";
   int looka;
   cin >> looka;
   while (!game.done()) {
      if (looka > 0)
         look_ahead(game, looka, next_move);
      else {
         Stack moves;
         game.legal_moves(moves);
         moves.top(next_move);
      }
      game.play(next_move);
      game.print();
   }
}
